# -*- coding: utf-8 -*-
"""CSE422_10_Lab_Assignment01_Summer2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OuMnFByuKwozj10d00XMu9w6_hJFOioE

# A* Search Algorithm
"""

def a_star(graph, start, goal, heuristic):
    a_list = {start: (0, 0 + heuristic[start], [])}  # (path_cost, total_cost, path list) #Tracking the path
    visited_area = set()

    while a_list:
        cur_loc = min(a_list, key=lambda k: a_list[k][1]) #finding lowest cost
        path_cost, total_cost, path = a_list[cur_loc]
        path = path + [cur_loc]

        if cur_loc == goal:          #Checking if I reached the destination or not
            return path, path_cost

        del a_list[cur_loc]         #poping out the lowest cost node
        visited_area.add(cur_loc)

        for neighbor, cost in graph[cur_loc].items(): #iterating over the neighbors of the current location
            new_path_cost = path_cost + cost
            new_total_cost = new_path_cost + heuristic[neighbor]

            if neighbor in visited_area:  # If the neighbor is in the visited_area
                if neighbor in a_list and new_total_cost >= a_list[neighbor][1]: # If this path to neighbor is cheaper, reprocess the neighbor
                    continue
                visited_area.remove(neighbor)

            if neighbor not in a_list or new_total_cost < a_list[neighbor][1]: # If the neighbor is not in the a_list or found a cheaper path
                a_list[neighbor] = (new_path_cost, new_total_cost, path)

    return None, float('inf')

g={}
h={}
fullName = {}
with open("CSE422_10_Lab_Assignment01_InputFile_Summer2024.txt", "r") as f:
  lines=f.readlines()
  for l in lines:
    s=l.split()
    first=s[0][0]
    fullName[first] = s[0]
    h[first]=int(s[1])
    g[first]={}
    for i in range (2,len(s),2):
      g[first][s[i][0]]=int(s[i+1])
      if i not in fullName:
        fullName[s[i][0]] = s[i]

#print(g)
#print("Heuristic value = ",h)
#print(fullName)

starting=input("Write the starting point: ")
start=starting[0]
goal="B"
path, cost= a_star(g, start, goal, h)
#print(f"Path: {path}, Cost: {cost}")

output_file = 'CSE422_10_Lab_Assignment01_OutputFile_Summer2024.txt'
if path is None:
    output = "NO PATH FOUND"
else:
    covtName = [fullName[node] for node in path]
    output = f"Path: {' -> '.join(covtName)}\nTotal distance: {cost} km"

print(output)

with open(output_file, 'w') as f:
    f.write(output)

# g={'A': {'Z': 75, 'T': 118, 'S': 140},
#    'C': {'D': 120, 'R': 146, 'P': 138},
#    'E': {'H': 86},
#    'F': {'S': 99, 'B': 211},
#    'G': {'B': 90},
#    'M': {'L': 70, 'D': 75},
#    'N': {'l': 87},
#    'S': {'O': 151, 'A': 140, 'R': 80, 'F': 99},
#    'O': {'Z': 71, 'S': 151},
#    'P': {'R': 97, 'C': 138, 'B': 101},
#    'R': {'S': 80, 'C': 146, 'P': 97},
#    'D': {'M': 75, 'C': 120},
#    'H': {'U': 98, 'E': 86},
#    'l': {'V': 92, 'N': 87},
#    'L': {'T': 111, 'M': 70},
#    'T': {'A': 118, 'L': 111},
#    'U': {'B': 85, 'H': 98, 'V': 142},
#    'V': {'U': 142, 'l': 92},
#    'Z': {'O': 71, 'A': 75},
#    'B': {'F': 211, 'P': 101, 'G': 90, 'U': 85}}

# h =  {'A': 366,
#       'C': 160,
#       'E': 161,
#       'F': 176,
#       'G': 77,
#       'M': 241,
#       'N': 234,
#       'S': 253,
#       'O': 380,
#       'P': 100,
#       'R': 193,
#       'D': 242,
#       'H': 151,
#       'l': 226,
#       'L': 244,
#       'T': 329,
#       'U': 80,
#       'V': 199,
#       'Z': 374,
#       'B': 0}

# fullName={'A': 'Arad',
#           'Z': 'Zerind',
#           'T': 'Timisoara',
#           'S': 'Sibiu',
#           'C': 'Craiova',
#           'D': 'Dobreta',
#           'R': 'RimnicuVilcea',
#           'P': 'Pitesti',
#           'E': 'Eforie',
#           'H': 'Hirsova',
#           'F': 'Fagaras',
#           'B': 'Bucharest',
#           'G': 'Giurgiu',
#           'M': 'Mehadia',
#           'L': 'Lugoj',
#           'N': 'Neamt',
#           'l': 'lasi',
#           'O': 'Oradea',
#           'U': 'Urziceni',
#           'V': 'Vaslui'}